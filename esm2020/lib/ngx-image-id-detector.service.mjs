import { Injectable } from '@angular/core';
import { createWorker, PSM } from 'tesseract.js';
import { from } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class DetectIdService {
    constructor() {
        this.SIDE_PATTERNS = new Map([
            ['front', [
                    'CANCUCCONGDAN',
                    'CONGHAXHICHNGHAVITNAM',
                    'CNGHAXHICHNGHAVIETNAM',
                    'CONGHOAXAHOICHUNGHIAVIETNAM',
                    'DOCLAPTUDOHANHPHUC',
                    'HOVATENEULLNAME'
                ]],
            ['back', [
                    'DACDIEMNHANDANGPERSONALIDENTIFICATION',
                    'CUCTRUONGCUCCANHSAT',
                    'DANGPERSONALIDENTILICATION',
                    'CUCCANHSAT',
                    'NGONTROTRAI',
                    'NGONTROPHAI',
                    'CCTRUNGCCCNH',
                    'QUNLHNHCHNHVETRATTUXAHDHU',
                    'THEPOLICEDEPARTMENT',
                    'NHANDANGPERSONALIDENTILICATI'
                ]]
        ]);
    }
    detectIdCard(file, options) {
        return from(this.processImage(file, options)).pipe(map(result => result), catchError(error => {
            console.error('OCR Processing Error:', error);
            throw new Error('Không thể xử lý hình ảnh CCCD. Vui lòng thử lại.');
        }));
    }
    async processImage(file, options) {
        const { language = 'vie', whitelist = 'AĂÂBCDĐEÊGHIKLMNOÔƠPQRSTUƯVXYZaăâbcdđeêghiklmnoôơpqrstuưvxyz' +
            'ÀÁẢÃẠÂẤẦẨẪẬĂẮẰẲẴẶĐÈÉẺẼẸÊẾỀỂỄỆÌÍỈĨỊÒÓỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÙÚỦŨỤƯỨỪỬỮỰ' +
            'àáảãạâấầẩẫậăắằẳẵặđèéẻẽẹêếềểễệìíỉĩịòóỏõọôốồổỗộơớờởỡợùúủũụưứừửữự' +
            'ÝỲỶỸỴýỳỷỹỵ', logger } = options || {};
        let worker = null;
        try {
            worker = await createWorker(language, 1, { logger });
            await worker.setParameters({
                tessedit_char_whitelist: whitelist,
                tessedit_pageseg_mode: PSM.AUTO_OSD,
            });
            const { data: { text } } = await worker.recognize(file, { rotateAuto: true });
            const normalizedText = this.normalizeText(text);
            for (const [side, patterns] of this.SIDE_PATTERNS.entries()) {
                if (patterns.some(p => normalizedText.includes(this.normalizeText(p)))) {
                    return { side, text: normalizedText };
                }
            }
            return { side: 'unknown', text: normalizedText };
        }
        catch (error) {
            throw new Error('Không thể xử lý hình ảnh. Vui lòng kiểm tra lại ảnh CCCD.');
        }
        finally {
            if (worker) {
                await worker.terminate();
            }
        }
    }
    normalizeText(text) {
        return text
            .toUpperCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '') // Remove diacritics
            .replace(/\s+/g, ' ') // Normalize spaces
            .trim();
    }
}
DetectIdService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: DetectIdService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DetectIdService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: DetectIdService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: DetectIdService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltYWdlLWlkLWRldGVjdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtaW1hZ2UtaWQtZGV0ZWN0b3Ivc3JjL2xpYi9uZ3gtaW1hZ2UtaWQtZGV0ZWN0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFVLE1BQU0sY0FBYyxDQUFDO0FBQ3pELE9BQU8sRUFBRSxJQUFJLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDeEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFrQmpELE1BQU0sT0FBTyxlQUFlO0lBSDVCO1FBSW1CLGtCQUFhLEdBQUcsSUFBSSxHQUFHLENBQXVCO1lBQzdELENBQUMsT0FBTyxFQUFFO29CQUNSLGVBQWU7b0JBQ2YsdUJBQXVCO29CQUN2Qix1QkFBdUI7b0JBQ3ZCLDZCQUE2QjtvQkFDN0Isb0JBQW9CO29CQUNwQixpQkFBaUI7aUJBQ2xCLENBQUM7WUFDRixDQUFDLE1BQU0sRUFBRTtvQkFDUCx1Q0FBdUM7b0JBQ3ZDLHFCQUFxQjtvQkFDckIsNEJBQTRCO29CQUM1QixZQUFZO29CQUNaLGFBQWE7b0JBQ2IsYUFBYTtvQkFDYixjQUFjO29CQUNkLDJCQUEyQjtvQkFDM0IscUJBQXFCO29CQUNyQiw4QkFBOEI7aUJBQy9CLENBQUM7U0FDSCxDQUFDLENBQUM7S0EwREo7SUF4REMsWUFBWSxDQUFDLElBQVUsRUFBRSxPQUF5QjtRQUNoRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDaEQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQ3JCLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLHVCQUF1QixFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzlDLE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztRQUN0RSxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVPLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBVSxFQUFFLE9BQXlCO1FBQzlELE1BQU0sRUFDSixRQUFRLEdBQUcsS0FBSyxFQUNoQixTQUFTLEdBQUcsOERBQThEO1lBQzlELGdFQUFnRTtZQUNoRSxnRUFBZ0U7WUFDaEUsWUFBWSxFQUN4QixNQUFNLEVBQ1AsR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO1FBRWxCLElBQUksTUFBTSxHQUFrQixJQUFJLENBQUM7UUFDakMsSUFBSTtZQUNGLE1BQU0sR0FBRyxNQUFNLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztZQUVyRCxNQUFNLE1BQU0sQ0FBQyxhQUFhLENBQUM7Z0JBQ3pCLHVCQUF1QixFQUFFLFNBQVM7Z0JBQ2xDLHFCQUFxQixFQUFFLEdBQUcsQ0FBQyxRQUFRO2FBQ3BDLENBQUMsQ0FBQztZQUVILE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUM5RSxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRWhELEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUMzRCxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUN0RSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsQ0FBQztpQkFDdkM7YUFDRjtZQUVELE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsQ0FBQztTQUNsRDtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQywyREFBMkQsQ0FBQyxDQUFDO1NBQzlFO2dCQUFTO1lBQ1IsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsTUFBTSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDMUI7U0FDRjtJQUNILENBQUM7SUFFTyxhQUFhLENBQUMsSUFBWTtRQUNoQyxPQUFPLElBQUk7YUFDUixXQUFXLEVBQUU7YUFDYixTQUFTLENBQUMsS0FBSyxDQUFDO2FBQ2hCLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxvQkFBb0I7YUFDcEQsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxtQkFBbUI7YUFDeEMsSUFBSSxFQUFFLENBQUM7SUFDWixDQUFDOzs0R0EvRVUsZUFBZTtnSEFBZixlQUFlLGNBRmQsTUFBTTsyRkFFUCxlQUFlO2tCQUgzQixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNyZWF0ZVdvcmtlciwgUFNNLCBXb3JrZXIgfSBmcm9tICd0ZXNzZXJhY3QuanMnO1xuaW1wb3J0IHsgZnJvbSwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgdHlwZSBJZENhcmRTaWRlID0gJ2Zyb250JyB8ICdiYWNrJyB8ICd1bmtub3duJztcblxuZXhwb3J0IGludGVyZmFjZSBEZXRlY3RJZFJlc3VsdCB7XG4gIHNpZGU6IElkQ2FyZFNpZGU7XG4gIHRleHQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZXRlY3RJZE9wdGlvbnMge1xuICBsYW5ndWFnZT86IHN0cmluZztcbiAgd2hpdGVsaXN0Pzogc3RyaW5nO1xuICBsb2dnZXI/OiAobXNnOiBhbnkpID0+IHZvaWQ7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIERldGVjdElkU2VydmljZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgU0lERV9QQVRURVJOUyA9IG5ldyBNYXA8SWRDYXJkU2lkZSwgc3RyaW5nW10+KFtcbiAgICBbJ2Zyb250JywgW1xuICAgICAgJ0NBTkNVQ0NPTkdEQU4nLFxuICAgICAgJ0NPTkdIQVhISUNITkdIQVZJVE5BTScsXG4gICAgICAnQ05HSEFYSElDSE5HSEFWSUVUTkFNJyxcbiAgICAgICdDT05HSE9BWEFIT0lDSFVOR0hJQVZJRVROQU0nLFxuICAgICAgJ0RPQ0xBUFRVRE9IQU5IUEhVQycsXG4gICAgICAnSE9WQVRFTkVVTExOQU1FJ1xuICAgIF1dLFxuICAgIFsnYmFjaycsIFtcbiAgICAgICdEQUNESUVNTkhBTkRBTkdQRVJTT05BTElERU5USUZJQ0FUSU9OJyxcbiAgICAgICdDVUNUUlVPTkdDVUNDQU5IU0FUJyxcbiAgICAgICdEQU5HUEVSU09OQUxJREVOVElMSUNBVElPTicsXG4gICAgICAnQ1VDQ0FOSFNBVCcsXG4gICAgICAnTkdPTlRST1RSQUknLFxuICAgICAgJ05HT05UUk9QSEFJJyxcbiAgICAgICdDQ1RSVU5HQ0NDTkgnLFxuICAgICAgJ1FVTkxITkhDSE5IVkVUUkFUVFVYQUhESFUnLFxuICAgICAgJ1RIRVBPTElDRURFUEFSVE1FTlQnLFxuICAgICAgJ05IQU5EQU5HUEVSU09OQUxJREVOVElMSUNBVEknXG4gICAgXV1cbiAgXSk7XG5cbiAgZGV0ZWN0SWRDYXJkKGZpbGU6IEZpbGUsIG9wdGlvbnM/OiBEZXRlY3RJZE9wdGlvbnMpOiBPYnNlcnZhYmxlPERldGVjdElkUmVzdWx0PiB7XG4gICAgcmV0dXJuIGZyb20odGhpcy5wcm9jZXNzSW1hZ2UoZmlsZSwgb3B0aW9ucykpLnBpcGUoXG4gICAgICBtYXAocmVzdWx0ID0+IHJlc3VsdCksXG4gICAgICBjYXRjaEVycm9yKGVycm9yID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcignT0NSIFByb2Nlc3NpbmcgRXJyb3I6JywgZXJyb3IpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0tow7RuZyB0aOG7gyB44butIGzDvSBow6xuaCDhuqNuaCBDQ0NELiBWdWkgbMOybmcgdGjhu60gbOG6oWkuJyk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHByb2Nlc3NJbWFnZShmaWxlOiBGaWxlLCBvcHRpb25zPzogRGV0ZWN0SWRPcHRpb25zKTogUHJvbWlzZTxEZXRlY3RJZFJlc3VsdD4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGxhbmd1YWdlID0gJ3ZpZScsXG4gICAgICB3aGl0ZWxpc3QgPSAnQcSCw4JCQ0TEkEXDikdISUtMTU5Pw5TGoFBRUlNUVcavVlhZWmHEg8OiYmNkxJFlw6pnaGlrbG1ub8O0xqFwcXJzdHXGsHZ4eXonICtcbiAgICAgICAgICAgICAgICAgICfDgMOB4bqiw4PhuqDDguG6pOG6puG6qOG6quG6rMSC4bqu4bqw4bqy4bq04bq2xJDDiMOJ4bq64bq84bq4w4rhur7hu4Dhu4Lhu4Thu4bDjMON4buIxKjhu4rDksOT4buOw5Xhu4zDlOG7kOG7kuG7lOG7luG7mMag4bua4buc4bue4bug4buiw5nDmuG7psWo4bukxq/hu6jhu6rhu6zhu67hu7AnICtcbiAgICAgICAgICAgICAgICAgICfDoMOh4bqjw6PhuqHDouG6peG6p+G6qeG6q+G6rcSD4bqv4bqx4bqz4bq14bq3xJHDqMOp4bq74bq94bq5w6rhur/hu4Hhu4Phu4Xhu4fDrMOt4buJxKnhu4vDssOz4buPw7Xhu43DtOG7keG7k+G7leG7l+G7mcah4bub4bud4buf4buh4bujw7nDuuG7p8Wp4bulxrDhu6nhu6vhu63hu6/hu7EnICtcbiAgICAgICAgICAgICAgICAgICfDneG7suG7tuG7uOG7tMO94buz4bu34bu54bu1JyxcbiAgICAgIGxvZ2dlclxuICAgIH0gPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgbGV0IHdvcmtlcjogV29ya2VyIHwgbnVsbCA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIHdvcmtlciA9IGF3YWl0IGNyZWF0ZVdvcmtlcihsYW5ndWFnZSwgMSwgeyBsb2dnZXIgfSk7XG5cbiAgICAgIGF3YWl0IHdvcmtlci5zZXRQYXJhbWV0ZXJzKHtcbiAgICAgICAgdGVzc2VkaXRfY2hhcl93aGl0ZWxpc3Q6IHdoaXRlbGlzdCxcbiAgICAgICAgdGVzc2VkaXRfcGFnZXNlZ19tb2RlOiBQU00uQVVUT19PU0QsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyBkYXRhOiB7IHRleHQgfSB9ID0gYXdhaXQgd29ya2VyLnJlY29nbml6ZShmaWxlLCB7IHJvdGF0ZUF1dG86IHRydWUgfSk7XG4gICAgICBjb25zdCBub3JtYWxpemVkVGV4dCA9IHRoaXMubm9ybWFsaXplVGV4dCh0ZXh0KTtcblxuICAgICAgZm9yIChjb25zdCBbc2lkZSwgcGF0dGVybnNdIG9mIHRoaXMuU0lERV9QQVRURVJOUy5lbnRyaWVzKCkpIHtcbiAgICAgICAgaWYgKHBhdHRlcm5zLnNvbWUocCA9PiBub3JtYWxpemVkVGV4dC5pbmNsdWRlcyh0aGlzLm5vcm1hbGl6ZVRleHQocCkpKSkge1xuICAgICAgICAgIHJldHVybiB7IHNpZGUsIHRleHQ6IG5vcm1hbGl6ZWRUZXh0IH07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHsgc2lkZTogJ3Vua25vd24nLCB0ZXh0OiBub3JtYWxpemVkVGV4dCB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0tow7RuZyB0aOG7gyB44butIGzDvSBow6xuaCDhuqNuaC4gVnVpIGzDsm5nIGtp4buDbSB0cmEgbOG6oWkg4bqjbmggQ0NDRC4nKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKHdvcmtlcikge1xuICAgICAgICBhd2FpdCB3b3JrZXIudGVybWluYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBub3JtYWxpemVUZXh0KHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRleHRcbiAgICAgIC50b1VwcGVyQ2FzZSgpXG4gICAgICAubm9ybWFsaXplKCdORkQnKVxuICAgICAgLnJlcGxhY2UoL1tcXHUwMzAwLVxcdTAzNmZdL2csICcnKSAvLyBSZW1vdmUgZGlhY3JpdGljc1xuICAgICAgLnJlcGxhY2UoL1xccysvZywgJyAnKSAvLyBOb3JtYWxpemUgc3BhY2VzXG4gICAgICAudHJpbSgpO1xuICB9XG59XG4iXX0=